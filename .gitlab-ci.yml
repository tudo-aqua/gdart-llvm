variables:
  GIT_SUBMODULE_STRATEGY: recursive

build-java:
  image: maven:3-eclipse-temurin-11
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .gradle
      - .m2/repository
  variables:
    GRADLE_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.gradle.daemon=false"
    GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"

  script:
    - pushd jconstraints-custom
    - ./gradlew --build-cache
        -x :jconstraints-core:verifyGoogleJavaFormat
        -x :jconstraints-core:test
        -x :jconstraints-z3:test
        -x :jconstraints-cvc4:test
        publishToMavenLocal
    - popd

    # build DSE
    - mkdir -p gdart-llvm/dse/target
    - pushd dse
    - mvn package
    - mv target/dse-0.0.1-SNAPSHOT-jar-with-dependencies.jar ../gdart-llvm/dse/target
    - popd

    # build tracer
    - mkdir -p gdart-llvm/tracer/target
    - pushd tracer
    - mvn package
    - popd
    - mv ./tracer/target/tracer-1.0.jar ./gdart-llvm/tracer/target

  artifacts:
    paths:
      - gdart-llvm

get-clang:
  image: alpine
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - downloads
  before_script:
    - apk add binutils wget
  script:
    - mkdir -p downloads gdart-llvm/clang+llvm/bin
    - export CLANG_VERSION=14.0.0
    - export CLANG_NAME=clang+llvm-${CLANG_VERSION}-x86_64-linux-gnu-ubuntu-18.04
    - wget --progress=dot:giga
           https://github.com/llvm/llvm-project/releases/download/llvmorg-${CLANG_VERSION}/${CLANG_NAME}.tar.xz
           -cO downloads/clang+llvm-${CLANG_VERSION}.tar.xz
    - tar -xf downloads/clang+llvm-${CLANG_VERSION}.tar.xz
    - export CLANG_PATH=$(realpath ${CLANG_NAME})
    - mv "${CLANG_PATH}/bin/clang-14" "${CLANG_PATH}/bin/llvm-as" "${CLANG_PATH}/bin/llvm-link"
         gdart-llvm/clang+llvm/bin
    - find gdart-llvm/clang+llvm -type f -exec strip -s '{}' ';'

  artifacts:
    paths:
      - gdart-llvm

get-graalvm:
  image: alpine
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - downloads
  before_script:
    - apk add binutils gcompat wget
  script:
    # prepare GraalVM
    - mkdir -p downloads gdart-llvm
    - export GRAALVM_VERSION=22.1.0
    - export GRAALVM_NAME=graalvm-ce-java11-linux-amd64-${GRAALVM_VERSION}
    - wget --progress=dot:giga
           https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/${GRAALVM_NAME}.tar.gz
           -cO downloads/graalvm-ce-${GRAALVM_VERSION}.tar.gz
    - tar -xf downloads/graalvm-ce-${GRAALVM_VERSION}.tar.gz
    - export GRAALVM_PATH=$(realpath ${GRAALVM_NAME/-linux-amd64/})

    # add GraalVM LLVM support (automatic download only works for latest GraalVM version (22.2.0))
    - wget --progress=dot:mega
           https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/llvm-toolchain-installable-java11-linux-amd64-${GRAALVM_VERSION}.jar
           -cO downloads/graalvm-llvm-${GRAALVM_VERSION}.jar
    - ${GRAALVM_PATH}/lib/installer/bin/gu -L install downloads/graalvm-llvm-${GRAALVM_VERSION}.jar

    # minify and move GraalVM
    - find ${GRAALVM_PATH} -name *.a -delete
    - find ${GRAALVM_PATH} -type f -exec strip -s '{}' ';'
    - mv ${GRAALVM_PATH} gdart-llvm/graalvm-ce

  artifacts:
    paths:
      - gdart-llvm

get-licenses:
  image: alpine
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - downloads
  before_script:
    - apk add wget
  script:
    - mkdir -p downloads gdart-llvm
    - wget https://www.apache.org/licenses/LICENSE-2.0.txt -cO downloads/LICENSE.Apache-2.0
    - cp downloads/LICENSE.Apache-2.0 gdart-llvm
    - wget https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt -cO downloads/LICENSE.GPLv2
    - cp downloads/LICENSE.GPLv2 gdart-llvm
    - mv LICENSE.SV-COMP gdart-llvm/LICENSE

  artifacts:
    paths:
      - gdart-llvm

install-scripts:
  image: alpine
  before_script:
    - apk add git
  script:
    - mkdir -p gdart-llvm

    # version number
    - git rev-parse --short HEAD > gdart-llvm/version.txt

    # scripts and verifier
    - mv ./executor.sh gdart-llvm
    - mv ./dse_run.sh gdart-llvm/run-gdart.sh # "run-gdart.sh" name is hardcoded in gdart.py
    - mv ./verifier gdart-llvm

  artifacts:
    paths:
      - gdart-llvm

run-with-vcloud:
  image: $CI_REGISTRY/sv-comp/sv-comp-base-images/vcloud-ready:latest
  needs: [build-java, get-clang, get-graalvm, get-licenses, install-scripts]
  variables:
    DEBIAN_FRONTEND: noninteractive

  parallel:
    matrix:
#      - TASK_SET: Arrays
      - TASK_SET: BitVectors
      - TASK_SET: ControlFlow
#      - TASK_SET: ECA
#      - TASK_SET: Floats
#      - TASK_SET: Heap
#      - TASK_SET: Loops
#      - TASK_SET: ProductLines
#      - TASK_SET: Recursive
#      - TASK_SET: Sequentialized
#      - TASK_SET: XCSP
#      - TASK_SET: Combinations

  before_script:
    - apt-get install -y wget
    - wget --progress=dot:mega https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
    - chmod +x /usr/bin/yq
  script:
    - export BENCHMARK_BASE=$(realpath --relative-to="${PWD}" /data/sv-benchmarks/)
    - RUN_PWD="${PWD}"

    - declare -a SOURCE_FILES
    - pushd "${BENCHMARK_BASE}/c"
    - grep -v '^#' "ReachSafety-${TASK_SET}.set"
    - |+
      for yaml in $(grep -v '^#' "ReachSafety-${TASK_SET}.set"); do
        SOURCE_FILES+=("$(realpath --relative-to="${RUN_PWD}" "${yaml}")")
        yaml_dir="$(dirname "${yaml}")"
        for source in $(yq -N '.input_files' "${yaml}"); do
          SOURCE_FILES+=("$(realpath --relative-to="${RUN_PWD}" "${yaml_dir}/${source}")")
        done
      done
    - popd

    # benchmark tool "gdart" references gdart.py, which executes "run-gdart.sh"
    - >
      echo '<?xml version="1.0"?>
      <!DOCTYPE benchmark PUBLIC "+//IDN sosy-lab.org//DTD BenchExec benchmark 1.9//EN" "https://www.sosy-lab.org/benchexec/benchmark-2.3.dtd">
        <benchmark tool="gdart" timelimit="15 min" memlimit="15 GB" cpuCores="8">
        <resultfiles>**.graphml</resultfiles>
        <rundefinition name="SV-COMP23_unreach-call">
          <tasks name="ReachSafety-'"${TASK_SET}"'">
            <includesfile>'"${BENCHMARK_BASE}"'/c/ReachSafety-'"${TASK_SET}"'.set</includesfile>
            <propertyfile>'"${BENCHMARK_BASE}"'/c/properties/unreach-call.prp</propertyfile>
          </tasks>
        </rundefinition>
      </benchmark>' | tee gdart-llvm.xml
    - /data/benchexec/contrib/vcloud-benchmark.py
      --vcloudMaster $VCLOUD_MASTER
      --vcloudClientHeap 1560
      --vcloudAdditionalFiles
        ./gdart-llvm
        "/data/sv-benchmarks/c/ReachSafety-${TASK_SET}.set"
        /data/sv-benchmarks/c/properties/unreach-call.prp
        "${SOURCE_FILES[@]}"
      --vcloudJar /srv/vcloud/lib/vcloud.jar
      --no-container
      --tool-directory ./gdart-llvm gdart-llvm.xml | tee vcloud.run
    - $(cat vcloud.run | grep table-generator)
    - ./vcloud2junit.py results/gdart-llvm.*.xml.bz2 junit.xml
  artifacts:
    reports:
      junit: junit.xml
    paths:
      - results

pack-archive:
  image: alpine
  needs: [build-java, get-clang, get-graalvm, get-licenses, install-scripts]
  before_script:
    - apk add p7zip
  script:
    - 7z a -tzip -mx=9 gdart-llvm.zip gdart-llvm

  artifacts:
    paths:
      - gdart-llvm.zip

check-archive:
  image: registry.gitlab.com/sosy-lab/benchmarking/competition-scripts/test:latest
  needs: [pack-archive]
  script:
    - mkdir -p 2023
    - mv gdart-llvm.zip 2023
    - wget --progress=dot:mega https://github.com/sosy-lab/benchexec/archive/main.zip
    - unzip main.zip
    - PYTHONPATH=benchexec-main python3 competition-scripts/test/check-archives-svcomp.py 2023

upload-archive:
  image: alpine
  needs: [pack-archive]

  before_script:
    - apk add coreutils curl
  script:
    # Upload artifact to a publicly accessible server
    - curl -X PUT -u "${OWNCLOUD_USER}:${OWNCLOUD_PASSWORD}"
           "${OWNCLOUD}/remote.php/webdav/gdart-llvm.zip" --data-binary @"gdart-llvm.zip"
    # shareType 3 = public link
    - curl -u "${OWNCLOUD_USER}:${OWNCLOUD_PASSWORD}"
           "${OWNCLOUD}/ocs/v1.php/apps/files_sharing/api/v1/shares"
           --data 'format=json'
           --data 'path=/gdart-llvm.zip'
           --data 'name=CoVeriTeam CI Link'
           --data 'shareType=3'
           --data "expireDate=$(date --date='tomorrow' '+%Y-%m-%d')"
           -o share.json

  artifacts:
    paths:
      - share.json

run-with-coveriteam:
  image: $CI_REGISTRY/sv-comp/sv-comp-base-images/vcloud-ready:latest
  needs: [upload-archive]
  variables:
    DEBIAN_FRONTEND: noninteractive

  parallel:
    matrix:
      - SOURCE_FILE: c/bitvector/interleave_bits.i
        EXPECTED_RESULT: "== OK"
      - SOURCE_FILE: c/bitvector-regression/implicitfloatconversion.c
        EXPECTED_RESULT: "== ERROR"

  retry: 2 # CoVeriTeam seems to be flaky on occasion

  before_script:
    - apt-get install -y jq wget
  script:
    - SHARE="$(jq -r .ocs.data.url share.json)/download"

    # download CoVeriTeam
    - wget --progress=dot:mega https://gitlab.com/sosy-lab/software/coveriteam/-/archive/main/coveriteam-main.tar.bz2
    - tar -xf coveriteam-main.tar.bz2

    # Run CoVeriTeam
    - pushd coveriteam-main/examples
    - |+
      echo 'imports:
        - !include verifier_resource.yml
      actor_name: gdart
      toolinfo_module: "https://gitlab.com/sosy-lab/software/benchexec/-/raw/main/benchexec/tools/gdart.py"
      options: []
      archives:
        - version: default
          location: "'"${SHARE}"'"
      format_version: "1.2"
      ' | tee ../actors/gdart-llvm.yml
    - ../bin/coveriteam verifier-C.cvt
                     --input 'verifier_path=../actors/gdart-llvm.yml'
                     --input 'verifier_version=default'
                     --input "program_path=$(realpath --relative-to="${PWD}" "/data/sv-benchmarks/${SOURCE_FILE}")"
                     --input "specification_path=$(realpath --relative-to="${PWD}" /data/sv-benchmarks/c/properties/unreach-call.prp)"
                     --input 'data_model=ILP32'
                     --remote --verbose | tee ../../coveriteam.log
    - popd
    - grep -Fx "${EXPECTED_RESULT}" coveriteam.log
  artifacts:
    paths:
      - coveriteam.log

